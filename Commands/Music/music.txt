const { VolumeInterface } = require("discord.js");
const { EmbedBuilder, SlashCommandBuilder, PermissionFlagsBits, VoiceChannel, GuildEmoji } = require("discord.js");
const client = require("../../index.js");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("music")
        .setDescription("Complete music system.")
        .addSubcommand(subcommand =>
            subcommand.setName("options")
                .setDescription("Select an option.")
                .addStringOption(option => 
                    option.setName("options")
                        .setDescription("Select an option.")
                        .setRequired(true)
                        .addChoices(
                            { name: "queue", value: "queue" },
                            { name: "skip", value: "skip" },
                            { name: "pause", value: "pause" },
                            { name: "resume", value: "resume" },
                            { name: "stop", value: "stop" },
                        )
                )
        ),
        async execute(interaction) {
            const { options, member, guild, channel } = interaction;

            const subcommand = options.getSubcommand();
            const query = options.getString("query");
            const volume = options.getInteger("percentage");
            const option = options.getString("options");
            const VoiceChannel = member.voice.channel;

            const embed = new EmbedBuilder();

            if (!VoiceChannel) {
                embed.setColor("Red").setDescription("You must be in a voice channel to execute music commands.");
                return interaction.reply({ embeds: [embed], ephemeral: true });
            }

            if (!member.voice.channelId == guild.members.me.voice.channelId) {
                embed.setColor("Red").setDescription(`You can't use the music player as it's already active in <#${guild.members.me.voice.channelId}>.`);
                return interaction.reply({ embeds: [embed], ephemeral: true });
            }    

            try {
                switch (subcommand) {
                    case "play":
                        client.distube.play(VoiceChannel, query, { textChannel: channel, member: member });
                        return interaction.reply({ content: "üéµ Request received." });
                    case "volume":
                        client.distube.setVolume(VoiceChannel, volume);
                        return interaction.reply({ content: `üîâ Volume has been set to ${volume}%.` });    
                    case "options":
                        const queue = await client.distube.getQueue(VoiceChannel);

                        if (!queue) {
                            embed.setColor("Red").setDescription("There is no active queqe at the moment.");
                            return interaction.reply({ embeds: [embed], ephemeral: true });
                        }

                        switch(option) {
                            case "skip":
                                await queue.skip(VoiceChannel);
                                embed.setColor("Blue").setDescription("‚è© This song has been skipped.");
                                return interaction.reply({ embeds: [embed], ephemeral: true });
                            case "stop":
                                await queue.stop(VoiceChannel);
                                embed.setColor("Red").setDescription("‚èπÔ∏è The queqe has been stopped.");
                                return interaction.reply({ embeds: [embed], ephemeral: true });        
                            case "pause":
                                await queue.pause(VoiceChannel);
                                embed.setColor("Orange").setDescription("‚è∏Ô∏è The song has been paused.");
                                return interaction.reply({ embeds: [embed], ephemeral: true });
                            case "resume":
                                await queue.resume(VoiceChannel);
                                embed.setColor("Green").setDescription("‚èØÔ∏è The song has been resumed.");    
                                return interaction.reply({ embeds: [embed], ephemeral: true });
                            case "queqe":
                                embed.setColor("Purple").setDescription(`${queue.songs.map(
                                    (song, id) => `n\**${id + 1}.** ${song.name} -\`${song.formattedDuration}\``
                                )}`);
                                return interaction.reply({ embeds: [embed], ephemeral: true });
                        }
                }
            } catch (err) {
                console.log(err);

                embed.setColor("Red").setDescription("‚õî | Something went wrong...");   

                return interaction.reply({ embeds: [embed], ephemeral: true });
            }
        }
}
const status = queue =>
    `Volume: \`${queue.volume}%\` | Filter: \`${queue.filters.names.join(', ') || 'Off'}\` | Loop: \`${queue.repeatMode ? (queue.repeatMode === 2 ? 'All Queue' : 'This Song') : 'Off'
    }\` | Autoplay: \`${queue.autoplay ? 'On' : 'Off'}\``
client.distube
    .on('playSong', (queue, song) =>
        queue.textChannel.send({
            embeds: [new EmbedBuilder().setColor("Green")
                .setDescription(`üé∂ | Playing \`${song.name}\` - \`${song.formattedDuration}\`\nRequested by: ${song.user
                    }\n${status(queue)}`)]
        })
    )
    .on('addSong', (queue, song) =>
        queue.textChannel.send(
            {
                embeds: [new EmbedBuilder().setColor("Green")
                    .setDescription(`üé∂ | Added ${song.name} - \`${song.formattedDuration}\` to the queue by ${song.user}`)]
            }
        )
    )
    .on('addList', (queue, playlist) =>
        queue.textChannel.send(
            {
                embeds: [new EmbedBuilder().setColor("Green")
                    .setDescription(`üé∂ | Added \`${playlist.name}\` playlist (${playlist.songs.length
                        } songs) to queue\n${status(queue)}`)]
            }
        )
    )
    .on('error', (channel, e) => {
        if (channel) channel.send(`‚õî | An error encountered: ${e.toString().slice(0, 1974)}`)
        else console.error(e)
    })
    .on('empty', channel => channel.send({
        embeds: [new EmbedBuilder().setColor("Red")
            .setDescription('‚õî |Voice channel is empty! Leaving the channel...')]
    }))
    .on('searchNoResult', (message, query) =>
        message.channel.send(
            {
                embeds: [new EmbedBuilder().setColor("Red")
                    .setDescription('`‚õî | No result found for \`${query}\`!`')]
            })
    )
    .on('finish', queue => queue.textChannel.send({
        embeds: [new EmbedBuilder().setColor("Green")
            .setDescription('üèÅ | Queue finished!')]
    }))
