"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cwd = exports.argvOptions = exports.flags = exports.cliVersion = exports.cli = exports.command = void 0;
const client_1 = require("@reciple/client");
const node_fs_1 = require("node:fs");
const node_util_1 = require("node:util");
const commander_1 = require("commander");
const semver_1 = require("semver");
const node_path_1 = __importDefault(require("node:path"));
const { version, description } = JSON.parse((0, node_fs_1.readFileSync)(node_path_1.default.join(__dirname, '../../package.json'), 'utf-8'));
const originalCwd = process.cwd();
exports.command = new commander_1.Command()
    .name('reciple')
    .description(description)
    .version(`Reciple CLI: ${version}\nReciple Client: ${client_1.realVersion}`, '-v, --version')
    .argument('[cwd]', 'Change the current working directory')
    .option('-t, --token <token>', 'Replace used bot token')
    .option('-c, --config <dir>', 'Set path to a config file', (v, p) => p.concat([v]), [])
    .option('-D, --debugmode', 'Enable debug mode')
    .option('-y, --yes', 'Agree to all Reciple confirmation prompts')
    .option('--env <file>', '.env file location')
    .option('--shardmode', 'Modifies some functionalities to support sharding')
    .option('--setup', 'Create required config without starting the bot')
    .option('--cache-config <file>', 'Add custom caching config')
    .option('--sweeper-config <file>', 'Add custom sweeper config')
    .allowUnknownOption(true);
exports.cli = {
    get args() { return exports.command.args; },
    get options() { return exports.command.opts(); },
    get cwd() {
        return this.args[0]
            ? node_path_1.default.isAbsolute(this.args[0]) ? this.args[0] : node_path_1.default.join(originalCwd, this.args[0])
            : process.cwd();
    },
    binPath: node_path_1.default.join(__dirname, '../bin.mjs')
};
exports.cliVersion = `${(0, semver_1.coerce)(version)}`;
// TODO: Remove deprecated
/**
 * @deprecated Use `cli` object instead
 */
exports.flags = exports.cli.options;
/**
 * @deprecated Use `cli` object instead
 */
exports.argvOptions = (0, node_util_1.deprecate)(() => exports.cli.options, 'argvOptions() is deprecated. Use the cli.args instead.');
/**
 * @deprecated Use `cli` object instead
 */
exports.cwd = exports.cli.args[0] ? node_path_1.default.resolve(exports.cli.args[0]) : process.cwd();
//# sourceMappingURL=cli.js.map