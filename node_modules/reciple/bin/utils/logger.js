"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventLogger = exports.quoteString = exports.createLogger = exports.formatLogMessage = void 0;
const fallout_utility_1 = require("fallout-utility");
const node_path_1 = __importDefault(require("node:path"));
const cli_1 = require("./cli");
function formatLogMessage(message, logger, config, level) {
    const color = (msg) => {
        if (!config.coloredMessages || level === fallout_utility_1.LoggerLevel.INFO)
            return msg;
        switch (level) {
            case fallout_utility_1.LoggerLevel.WARN:
                return fallout_utility_1.kleur.yellow(msg);
            case fallout_utility_1.LoggerLevel.ERROR:
                return fallout_utility_1.kleur.red(msg);
            case fallout_utility_1.LoggerLevel.DEBUG:
                return fallout_utility_1.kleur.cyan(msg);
            default:
                return msg;
        }
    };
    return (!config.disableLogPrefix
        ? color(`[${new Date().toLocaleTimeString(undefined, { hour12: false })} ${fallout_utility_1.LoggerLevel[level]}]` +
            (cli_1.cli.options.shardmode && process.pid ? `[${process.pid}]` : '') +
            (logger.name ? `[${logger.name}]` : ''))
        : '') + ` ${message}`;
}
exports.formatLogMessage = formatLogMessage;
async function createLogger(config) {
    const logger = new fallout_utility_1.Logger({
        enableDebugmode: cli_1.cli.options.debugmode || config.debugmode === true,
        forceEmitLogEvents: true,
        formatMessage: (message, level, logger) => formatLogMessage(message, logger, config, level)
    });
    if (config.logToFile?.enabled) {
        await logger.createFileWriteStream({
            file: node_path_1.default.join(process.cwd(), config.logToFile?.logsFolder ?? node_path_1.default.join(process.cwd(), 'logs'), !cli_1.cli.options.shardmode ? (config.logToFile?.file ?? 'latest.log') : `${process.pid}.log`)
        });
    }
    return logger;
}
exports.createLogger = createLogger;
function quoteString(string, quote = "'") {
    return `${quote}${string}${quote}`;
}
exports.quoteString = quoteString;
function eventLogger(client) {
    client.on('recipleDebug', debug => client.logger?.debug(debug));
    client.modules.on('resolveModuleFileError', (file, error) => client.logger?.err(`Failed to resolve module ${fallout_utility_1.kleur.yellow(quoteString(file))}:`, error));
    client.modules.on('preStartModule', (module_) => client.logger?.debug(`Starting module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('postStartModule', (module_) => client.logger?.log(`Started module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('startModuleFailed', (module_) => client.logger?.error(`Failed to start module ${fallout_utility_1.kleur.yellow(quoteString(module_.displayName))}: ${fallout_utility_1.kleur.red('Module returned false')}`));
    client.modules.on('startModuleError', (module_, err) => client.logger?.error(`An error occured while starting module ${fallout_utility_1.kleur.yellow(quoteString(module_.displayName))}:`, err));
    client.modules.on('preLoadModule', (module_) => client.logger?.debug(`Loading module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('postLoadModule', (module_) => client.logger?.log(`Loaded module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('loadModuleError', (module_, err) => client.logger?.error(`An error occured while loading module ${fallout_utility_1.kleur.yellow(quoteString(module_.displayName))}:`, err));
    client.modules.on('preUnloadModule', (module_) => client.logger?.debug(`Unloading module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('postUnloadModule', (module_) => client.logger?.log(`Unloaded module ${fallout_utility_1.kleur.cyan(quoteString(module_.displayName))}`));
    client.modules.on('unloadModuleError', (module_, err) => client.logger?.error(`An error occured while unloading module ${fallout_utility_1.kleur.yellow(quoteString(module_.displayName))}:`, err));
    client.on('recipleRegisterApplicationCommands', (commands, guild) => client.logger?.log(`Registered (${commands?.size || 0}) application commands ${guild ? 'to ' + guild : 'globally'}`));
}
exports.eventLogger = eventLogger;
//# sourceMappingURL=logger.js.map