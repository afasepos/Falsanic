"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLatestUpdate = exports.fetchPackageData = exports.UpdateType = void 0;
const semver_1 = require("semver");
var UpdateType;
(function (UpdateType) {
    UpdateType[UpdateType["None"] = 0] = "None";
    UpdateType[UpdateType["Major"] = 1] = "Major";
    UpdateType[UpdateType["Minor"] = 2] = "Minor";
    UpdateType[UpdateType["Patch"] = 3] = "Patch";
    UpdateType[UpdateType["Prerelease"] = 4] = "Prerelease";
    UpdateType[UpdateType["Build"] = 5] = "Build";
})(UpdateType || (exports.UpdateType = UpdateType = {}));
async function fetchPackageData(pkg, options) {
    return (await import('package-json')).default(pkg, options ?? { allVersions: true });
}
exports.fetchPackageData = fetchPackageData;
async function checkLatestUpdate(pkg, version, allowMajor = false) {
    const currentSemver = new semver_1.SemVer(version);
    const updateData = await fetchPackageData(pkg);
    const versions = Object.keys(updateData.versions).filter(v => !v.includes('-') && (allowMajor || (0, semver_1.satisfies)(v, `^${currentSemver.version}`))) ?? [];
    const latest = versions.length && versions[versions.length - 1] ? new semver_1.SemVer(versions[versions.length - 1]) : null;
    if (!latest)
        throw new Error(`Unable to find any version of '${pkg}' that satisfies ^${currentSemver.version}`);
    const response = {
        package: pkg,
        data: updateData,
        currentVersion: currentSemver.format(),
        updatedVersion: latest.format(),
        latestVersion: updateData['dist-tags'].latest,
        updateType: UpdateType.None
    };
    if (currentSemver.version === latest.version)
        return response;
    if (latest.compareBuild(currentSemver) === 1)
        response.updateType = UpdateType.Build;
    if (latest.comparePre(currentSemver) === 1)
        response.updateType = UpdateType.Prerelease;
    if (currentSemver.patch !== latest.patch)
        response.updateType = UpdateType.Patch;
    if (currentSemver.minor !== latest.minor)
        response.updateType = UpdateType.Minor;
    if (currentSemver.major !== latest.major)
        response.updateType = UpdateType.Major;
    return response;
}
exports.checkLatestUpdate = checkLatestUpdate;
//# sourceMappingURL=index.js.map