import { MessageCommandOptionBuilder, MessageCommandOptionResolvable } from './MessageCommandOptionBuilder';
import { MessageCommandOptionManager } from '../managers/MessageCommandOptionManager';
import { BaseCommandBuilder, BaseCommandBuilderData } from './BaseCommandBuilder';
import { Awaitable, If, Message, RestOrArray } from 'discord.js';
import { MessageCommandValidateOptionData } from '../../types/options';
import { CommandHaltData } from '../../types/halt';
import { BaseCommandData, CommandType } from '../../types/commands';
import { CommandData } from 'fallout-utility';
import { RecipleClient } from '../RecipleClient';
export interface MessageCommandExecuteData<Options extends boolean = true> {
    /**
     * The type of command.
     */
    commandType: CommandType.MessageCommand;
    /**
     * The current bot client. This is the client that the command is being executed on.
     */
    client: RecipleClient;
    /**
     * The command message. This is the message that triggered the command.
     */
    message: Message;
    /**
     * The options object can be used to access the values of the command options.
     */
    options: If<Options, MessageCommandOptionManager>;
    /**
     * This is an object that contains the raw data for the command.
     */
    command: CommandData;
    /**
     * This is the builder that was used to create the command.
     */
    builder: MessageCommandBuilder;
}
export type MessageCommandHaltData = CommandHaltData<CommandType.MessageCommand>;
export type MessageCommandExecuteFunction = (executeData: MessageCommandExecuteData) => Awaitable<void>;
export type MessageCommandPreconditionFunction = (executeData: MessageCommandExecuteData) => Awaitable<boolean>;
export type MessageCommandHaltFunction = (haltData: MessageCommandHaltData) => Awaitable<boolean>;
export type MessageCommandResovable = MessageCommandBuilder | MessageCommandData;
export interface MessageCommandData extends BaseCommandBuilderData, BaseCommandData {
    commandType: CommandType.MessageCommand;
    /**
     * Command aliases
     */
    aliases?: string[];
    halt?: MessageCommandHaltFunction;
    execute?: MessageCommandExecuteFunction;
    /**
     * Validates every command options
     */
    validateOptions?: boolean;
    /**
     * Allow execute in DM channels
     */
    dmPermission?: boolean;
    /**
     * Allow execute by bot users
     */
    userBotPermission?: boolean;
    /**
     * Command options
     */
    options?: MessageCommandOptionResolvable[];
}
export interface MessageCommandBuilder extends BaseCommandBuilder {
    halt?: MessageCommandHaltFunction;
    execute?: MessageCommandExecuteFunction;
    setHalt(halt?: MessageCommandHaltFunction | null): this;
    setExecute(execute?: MessageCommandExecuteFunction | null): this;
}
export declare class MessageCommandBuilder extends BaseCommandBuilder implements MessageCommandData {
    readonly commandType: CommandType.MessageCommand;
    name: string;
    aliases: string[];
    description: string;
    validateOptions: boolean;
    dmPermission: boolean;
    userBotPermission: boolean;
    options: MessageCommandOptionBuilder[];
    constructor(data?: Omit<Partial<MessageCommandData>, 'commandType'>);
    /**
     * Sets the name of the command.
     * @param name The command name
     */
    setName(name: string): this;
    /**
     * Adds aliases to the command.
     * @param aliases The command aliases
     */
    addAliases(...aliases: RestOrArray<string>): this;
    /**
     * Sets the aliases for the command
     * @param aliases The command aliases
     */
    setAliases(...aliases: RestOrArray<string>): this;
    /**
     * Sets whether the command can be used in direct messages.
     * @param dmPermission Is allowed in DM
     */
    setDmPermission(dmPermission: boolean): this;
    /**
     * Sets whether the command can be executed by bots.
     * @param userBotPermission Is executable by bots
     */
    setUserBotPermission(userBotPermission: boolean): this;
    /**
     * Sets whether the command options should be validated.
     * @param validateOptions Is command options validate enabled
     */
    setValidateOptions(validateOptions: boolean): this;
    /**
     * Sets the description of the command.
     * @param description The command description
     */
    setDescription(description: string): this;
    /**
     * Adds options to the command.
     * @param options The command options
     */
    addOptions(...options: RestOrArray<MessageCommandOptionResolvable | ((builder: MessageCommandOptionBuilder) => MessageCommandOptionBuilder)>): this;
    /**
     * Sets options to the command.
     * @param options The command options
     */
    setOptions(...options: RestOrArray<MessageCommandOptionResolvable | ((builder: MessageCommandOptionBuilder) => MessageCommandOptionBuilder)>): this;
    /**
     * Add a single option to the command.
     * @param optionResolvable The command option
     */
    addOption(optionResolvable: MessageCommandOptionResolvable | ((builder: MessageCommandOptionBuilder) => MessageCommandOptionBuilder)): this;
    toJSON(): MessageCommandData;
    /**
     * Resolve message command data and returns a builder
     * @param messageCommandResolvable The message command data
     */
    static resolve(messageCommandResolvable: MessageCommandResovable): MessageCommandBuilder;
    static isMessageCommandBuilder(data: any): data is MessageCommandBuilder;
    /**
     * Get validated command option values
     * @param options Validate options data
     */
    static validateCommandOptions(options: MessageCommandValidateOptionData): Promise<MessageCommandOptionManager>;
    /**
     * Execute a message command
     * @param client Current bot client
     * @param message The command message
     * @param prefix The command prefix
     * @param separator The command args separator
     * @param command Command builder resolvable of the command you wanna execute
     */
    static execute(client: RecipleClient, message: Message, prefix?: string, separator?: string, command?: MessageCommandResovable): Promise<MessageCommandExecuteData | undefined>;
}
