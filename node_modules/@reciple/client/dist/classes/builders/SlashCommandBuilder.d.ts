import discordjs, { Awaitable, ChatInputCommandInteraction, SharedSlashCommandOptions, SlashCommandAttachmentOption, SlashCommandBooleanOption, SlashCommandChannelOption, SlashCommandIntegerOption, SlashCommandMentionableOption, SlashCommandNumberOption, SlashCommandRoleOption, SlashCommandStringOption, SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder, SlashCommandUserOption } from 'discord.js';
import { AnySlashCommandOptionBuilder, AnySlashCommandOptionData, SlashCommandOptionResolvable, SlashCommandSubcommandOptionsOnlyBuilder, SlashCommandSubcommandOptionsOnlyData, SlashCommandSubcommandsOnlyResolvable } from '../../types/slashCommandOptions';
import { BaseInteractionBasedCommandData, CommandType } from '../../types/commands';
import { BaseCommandBuilder, BaseCommandBuilderData } from './BaseCommandBuilder';
import { CommandHaltData } from '../../types/halt';
import { RecipleClient } from '../RecipleClient';
export interface SlashCommandExecuteData {
    /**
     * The type of command.
     */
    commandType: CommandType.SlashCommand;
    /**
     * The current bot client. This is the client that the command is being executed on.
     */
    client: RecipleClient;
    /**
     * The command interaction. This is the interaction that triggered the command.
     */
    interaction: ChatInputCommandInteraction;
    /**
     * The command builder. This is the builder that was used to create the command.
     */
    builder: AnySlashCommandBuilder;
}
export type SlashCommandHaltData = CommandHaltData<CommandType.SlashCommand>;
export type SlashCommandExecuteFunction = (executeData: SlashCommandExecuteData) => Awaitable<void>;
export type SlashCommandPreconditionFunction = (executeData: SlashCommandExecuteData) => Awaitable<boolean>;
export type SlashCommandHaltFunction = (haltData: SlashCommandHaltData) => Awaitable<boolean>;
export type SlashCommandResolvable = AnySlashCommandBuilder | SlashCommandData;
export type AnySlashCommandBuilder = SlashCommandSubcommandsOnlyBuilder | SlashCommandOptionsOnlyBuilder | SlashCommandBuilder;
export type SlashCommandSubcommandsOnlyBuilder = Omit<SlashCommandBuilder, 'addBooleanOption' | 'addUserOption' | 'addChannelOption' | 'addRoleOption' | 'addAttachmentOption' | 'addMentionableOption' | 'addStringOption' | 'addIntegerOption' | 'addNumberOption'>;
export type SlashCommandOptionsOnlyBuilder = Omit<SlashCommandBuilder, 'addSubcommand' | 'addSubcommandGroup'>;
export interface SlashCommandData extends BaseCommandBuilderData, BaseInteractionBasedCommandData<true> {
    commandType: CommandType.SlashCommand;
    halt?: SlashCommandHaltFunction;
    execute?: SlashCommandExecuteFunction;
    options?: SlashCommandOptionResolvable[] | SlashCommandSubcommandsOnlyResolvable[];
}
export interface SlashCommandBuilder extends discordjs.SlashCommandBuilder, BaseCommandBuilder {
    halt?: SlashCommandHaltFunction;
    execute?: SlashCommandExecuteFunction;
    setHalt(halt?: SlashCommandHaltFunction | null): this;
    setExecute(execute?: SlashCommandExecuteFunction | null): this;
    addSubcommandGroup(input: SlashCommandSubcommandGroupBuilder | ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder)): SlashCommandSubcommandsOnlyBuilder;
    addSubcommand(input: SlashCommandSubcommandBuilder | ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder)): SlashCommandSubcommandsOnlyBuilder;
    addBooleanOption(input: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addChannelOption(input: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addAttachmentOption(input: SlashCommandAttachmentOption | ((builder: SlashCommandAttachmentOption) => SlashCommandAttachmentOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addMentionableOption(input: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addStringOption(input: SlashCommandStringOption | Omit<SlashCommandStringOption, 'setAutocomplete'> | Omit<SlashCommandStringOption, 'addChoices'> | ((builder: SlashCommandStringOption) => SlashCommandStringOption | Omit<SlashCommandStringOption, 'setAutocomplete'> | Omit<SlashCommandStringOption, 'addChoices'>)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addIntegerOption(input: SlashCommandIntegerOption | Omit<SlashCommandIntegerOption, 'setAutocomplete'> | Omit<SlashCommandIntegerOption, 'addChoices'> | ((builder: SlashCommandIntegerOption) => SlashCommandIntegerOption | Omit<SlashCommandIntegerOption, 'setAutocomplete'> | Omit<SlashCommandIntegerOption, 'addChoices'>)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
    addNumberOption(input: SlashCommandNumberOption | Omit<SlashCommandNumberOption, 'setAutocomplete'> | Omit<SlashCommandNumberOption, 'addChoices'> | ((builder: SlashCommandNumberOption) => SlashCommandNumberOption | Omit<SlashCommandNumberOption, 'setAutocomplete'> | Omit<SlashCommandNumberOption, 'addChoices'>)): Omit<this, 'addSubcommand' | 'addSubcommandGroup'>;
}
declare const SlashCommandBuilder_base: import("ts-mixer/dist/types/types").Class<any[], discordjs.SlashCommandBuilder & BaseCommandBuilder, typeof discordjs.SlashCommandBuilder & typeof BaseCommandBuilder>;
export declare class SlashCommandBuilder extends SlashCommandBuilder_base {
    readonly commandType: CommandType.SlashCommand;
    constructor(data?: Omit<Partial<SlashCommandData>, 'commandType'>);
    setRequiredMemberPermissions(permissions?: discordjs.PermissionResolvable | null | undefined): this;
    toJSON(): discordjs.RESTPostAPIChatInputApplicationCommandsJSONBody & BaseCommandBuilderData;
    static addOption<Builder extends SharedSlashCommandOptions>(builder: Builder, option: AnySlashCommandOptionBuilder | SlashCommandSubcommandOptionsOnlyBuilder): Builder;
    static resolveOption<T extends AnySlashCommandOptionBuilder | SlashCommandSubcommandOptionsOnlyBuilder>(option: AnySlashCommandOptionData | SlashCommandSubcommandOptionsOnlyData): T;
    /**
     * Resolves a slash command data and return a builder
     * @param slashCommandResolvable Slash command data
     */
    static resolve(slashCommandResolvable: SlashCommandResolvable): AnySlashCommandBuilder;
    static isSlashCommandBuilder<T extends AnySlashCommandBuilder = AnySlashCommandBuilder>(data: any): data is T;
    /**
     * Execute a slash command
     * @param client Current bot client
     * @param interaction Command interaction
     * @param command Command builder resolvable of the command you wanna execute
     */
    static execute(client: RecipleClient, interaction: ChatInputCommandInteraction, command?: SlashCommandResolvable): Promise<SlashCommandExecuteData | undefined>;
}
export {};
