"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommandBuilder = void 0;
const discord_js_1 = require("discord.js");
const commands_1 = require("../../types/commands");
class BaseCommandBuilder {
    cooldown;
    requiredBotPermissions;
    requiredMemberPermissions;
    constructor(data) {
        this.from(data);
    }
    /**
     * Sets the command halt execute function
     * @param halt The function executed when a command is halted
     */
    setHalt(halt) {
        this.halt = halt || undefined;
        return this;
    }
    /**
     * Sets the execute function
     * @param execute The function executed when the command is triggered
     */
    setExecute(execute) {
        this.execute = execute || undefined;
        return this;
    }
    /**
     * Sets command execute cooldown
     * @param cooldown Command cooldown in milliseconds
     */
    setCooldown(cooldown) {
        this.cooldown = cooldown || undefined;
        return this;
    }
    /**
     * Sets the required bot permissions to execute this command
     * @param permissions Permission resolvable
     */
    setRequiredBotPermissions(permissions) {
        this.requiredBotPermissions = permissions ? new discord_js_1.PermissionsBitField(permissions).bitfield : undefined;
        return this;
    }
    /**
     * Sets the required member permissions to execute this command.
     * Unlike `.setDefaultMemberPermissions` it accepts string, array, and number permissions
     * @param permissions Permission resolvable
     */
    setRequiredMemberPermissions(permissions) {
        this.requiredMemberPermissions = permissions ? new discord_js_1.PermissionsBitField(permissions).bitfield : undefined;
        return this;
    }
    isContextMenu() {
        return this.commandType === commands_1.CommandType.ContextMenuCommand;
    }
    isSlashCommand() {
        return this.commandType === commands_1.CommandType.SlashCommand;
    }
    isMessageCommand() {
        return this.commandType === commands_1.CommandType.MessageCommand;
    }
    toCommandData() {
        return {
            commandType: this.commandType,
            cooldown: this.cooldown,
            halt: this.halt,
            execute: this.execute,
            requiredBotPermissions: this.requiredBotPermissions,
            requiredMemberPermissions: this.requiredMemberPermissions
        };
    }
    from(data) {
        if (data?.cooldown !== undefined)
            this.setCooldown(Number(data?.cooldown));
        if (data?.requiredBotPermissions !== undefined)
            this.setRequiredBotPermissions(data.requiredBotPermissions);
        if (data?.requiredMemberPermissions !== undefined)
            this.setRequiredMemberPermissions(data.requiredMemberPermissions);
        if (data?.halt !== undefined)
            this.setHalt(data.halt);
        if (data?.execute !== undefined)
            this.setExecute(data.execute);
    }
}
exports.BaseCommandBuilder = BaseCommandBuilder;
//# sourceMappingURL=BaseCommandBuilder.js.map