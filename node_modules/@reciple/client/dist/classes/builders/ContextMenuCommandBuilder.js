"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuCommandBuilder = void 0;
const discord_js_1 = __importStar(require("discord.js"));
const commands_1 = require("../../types/commands");
const BaseCommandBuilder_1 = require("./BaseCommandBuilder");
const halt_1 = require("../../types/halt");
const permissions_1 = require("../../utils/permissions");
const ts_mixer_1 = require("ts-mixer");
class ContextMenuCommandBuilder extends (0, ts_mixer_1.Mixin)(discord_js_1.default.ContextMenuCommandBuilder, BaseCommandBuilder_1.BaseCommandBuilder) {
    commandType = commands_1.CommandType.ContextMenuCommand;
    constructor(data) {
        super(data);
        if (data?.name !== undefined)
            this.setName(data.name);
        if (data?.type !== undefined)
            this.setType(data.type);
        if (data?.nameLocalizations !== undefined)
            this.setNameLocalizations(data.nameLocalizations);
    }
    setRequiredMemberPermissions(permissions) {
        super.setRequiredMemberPermissions(permissions);
        this.setDefaultMemberPermissions(this.requiredMemberPermissions);
        return this;
    }
    toJSON() {
        return super.toJSON();
    }
    setType(type) {
        super.setType(typeof type === 'number' ? type : discord_js_1.ApplicationCommandType[type]);
        return this;
    }
    /**
     * Resolve a context menu command data and return a builder
     * @param contextMenuCommandResolvable Context menu command data
     */
    static resolve(contextMenuCommandResolvable) {
        return this.isContextMenuCommandBuilder(contextMenuCommandResolvable) ? contextMenuCommandResolvable : new ContextMenuCommandBuilder(contextMenuCommandResolvable);
    }
    static isContextMenuCommandBuilder(data) {
        return data instanceof ContextMenuCommandBuilder;
    }
    /**
     * Execute a context menu command
     * @param client Current bot client
     * @param interaction Context menu command interaction
     * @param command Command builder resolvable of the command you wanna execute
     */
    static async execute(client, interaction, command) {
        if (client.config.commands?.contextMenuCommand?.enabled === false)
            return;
        if (client.config.commands?.contextMenuCommand?.acceptRepliedInteractions === false && (interaction.replied || interaction.deferred))
            return;
        const builder = command ? this.resolve(command) : client.commands.get(interaction.commandName, commands_1.CommandType.ContextMenuCommand);
        if (!builder)
            return;
        const executeData = {
            builder,
            commandType: builder.commandType,
            interaction,
            client
        };
        if (client.config.commands?.contextMenuCommand?.enableCooldown !== false && builder.cooldown) {
            const cooldownData = {
                command: builder.name,
                user: interaction.user,
                type: builder.commandType
            };
            if (!client.cooldowns.isCooledDown(cooldownData)) {
                client.cooldowns.add({ ...cooldownData, endsAt: new Date(Date.now() + builder.cooldown) });
            }
            else {
                await client._haltCommand(builder, {
                    commandType: builder.commandType,
                    reason: halt_1.CommandHaltReason.Cooldown,
                    cooldownData: client.cooldowns.get(cooldownData),
                    executeData
                });
                return;
            }
        }
        if (builder.requiredBotPermissions && interaction.inGuild()) {
            const isBotExecuteAllowed = (0, permissions_1.botHasPermissionsToExecute)((interaction.channel || interaction.guild), builder.requiredBotPermissions);
            if (!isBotExecuteAllowed) {
                await client._haltCommand(builder, {
                    commandType: builder.commandType,
                    reason: halt_1.CommandHaltReason.MissingBotPermissions,
                    executeData
                });
                return;
            }
        }
        const precondition = await client._executeCommandPrecondition(builder, executeData);
        if (!precondition)
            return;
        return (await client._executeCommand(builder, executeData)) ? executeData : undefined;
    }
}
exports.ContextMenuCommandBuilder = ContextMenuCommandBuilder;
//# sourceMappingURL=ContextMenuCommandBuilder.js.map