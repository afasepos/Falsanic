import { ContextMenuCommandBuilder, PermissionResolvable, SlashCommandBuilder } from 'discord.js';
import { AnyCommandExecuteFunction, AnyCommandHaltFunction, CommandType } from '../../types/commands';
import { MessageCommandBuilder } from './MessageCommandBuilder';
export interface BaseCommandBuilderData {
    /**
     * The type of command.
     */
    commandType: CommandType;
    /**
     * The cooldown in milliseconds. This is the amount of time that must elapse before the command can be executed again.
     */
    cooldown?: number;
    /**
     * The required bot permissions to execute the command. This can be a permission resolvable or an array of permission resolvable.
     */
    requiredBotPermissions?: PermissionResolvable;
    /**
     * The required member permissions to execute the command.This can be a permission resolvable or an array of permission resolvable.
     */
    requiredMemberPermissions?: PermissionResolvable;
    /**
     * The halt execute function. This is a function that is called if the command is halted.
     */
    halt?: AnyCommandHaltFunction;
    /**
     * The command execute function. This is the function that is called when the command is executed.
     */
    execute?: AnyCommandExecuteFunction;
}
export declare abstract class BaseCommandBuilder implements BaseCommandBuilderData {
    abstract readonly commandType: CommandType;
    abstract halt?: AnyCommandHaltFunction;
    abstract execute?: AnyCommandExecuteFunction;
    cooldown?: number;
    requiredBotPermissions?: bigint;
    requiredMemberPermissions?: bigint;
    constructor(data?: Omit<Partial<BaseCommandBuilderData>, 'commandType'>);
    /**
     * Sets the command halt execute function
     * @param halt The function executed when a command is halted
     */
    setHalt(halt?: AnyCommandHaltFunction | null): this;
    /**
     * Sets the execute function
     * @param execute The function executed when the command is triggered
     */
    setExecute(execute?: AnyCommandExecuteFunction | null): this;
    /**
     * Sets command execute cooldown
     * @param cooldown Command cooldown in milliseconds
     */
    setCooldown(cooldown?: number | null): this;
    /**
     * Sets the required bot permissions to execute this command
     * @param permissions Permission resolvable
     */
    setRequiredBotPermissions(permissions?: PermissionResolvable | null): this;
    /**
     * Sets the required member permissions to execute this command.
     * Unlike `.setDefaultMemberPermissions` it accepts string, array, and number permissions
     * @param permissions Permission resolvable
     */
    setRequiredMemberPermissions(permissions?: PermissionResolvable | null): this;
    isContextMenu(): this is ContextMenuCommandBuilder;
    isSlashCommand(): this is SlashCommandBuilder;
    isMessageCommand(): this is MessageCommandBuilder;
    protected toCommandData(): BaseCommandBuilderData;
    protected from(data?: Omit<Partial<BaseCommandBuilderData>, 'commandType'>): void;
}
