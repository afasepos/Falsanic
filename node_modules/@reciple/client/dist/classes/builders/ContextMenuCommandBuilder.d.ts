import discordjs, { Awaitable, ContextMenuCommandInteraction, ContextMenuCommandType } from 'discord.js';
import { BaseInteractionBasedCommandData, CommandType } from '../../types/commands';
import { BaseCommandBuilder, BaseCommandBuilderData } from './BaseCommandBuilder';
import { CommandHaltData } from '../../types/halt';
import { RecipleClient } from '../RecipleClient';
export interface ContextMenuCommandExecuteData {
    /**
     * The type of command.
     */
    commandType: CommandType.ContextMenuCommand;
    /**
     * The current bot client. This is the client that the command is being executed on.
     */
    client: RecipleClient;
    /**
     * The command interaction. This is the interaction that triggered the command.
     */
    interaction: ContextMenuCommandInteraction;
    /**
     * The command builder. This is the builder that was used to create the command.
     */
    builder: ContextMenuCommandBuilder;
}
export type ContextMenuCommandHaltData = CommandHaltData<CommandType.ContextMenuCommand>;
export type ContextMenuCommandExecuteFunction = (executeData: ContextMenuCommandExecuteData) => Awaitable<void>;
export type ContextMenuCommandPreconditionFunction = (executeData: ContextMenuCommandExecuteData) => Awaitable<boolean>;
export type ContextMenuCommandHaltFunction = (haltData: ContextMenuCommandHaltData) => Awaitable<boolean>;
export type ContextMenuCommandResolvable = ContextMenuCommandBuilder | ContextMenuCommandData;
export interface ContextMenuCommandData extends BaseCommandBuilderData, BaseInteractionBasedCommandData<false> {
    commandType: CommandType.ContextMenuCommand;
    type: ContextMenuCommandType | 'User' | 'Message';
    halt?: ContextMenuCommandHaltFunction;
    execute?: ContextMenuCommandExecuteFunction;
}
export interface ContextMenuCommandBuilder extends discordjs.ContextMenuCommandBuilder, BaseCommandBuilder {
    halt?: ContextMenuCommandHaltFunction;
    execute?: ContextMenuCommandExecuteFunction;
    setHalt(halt?: ContextMenuCommandHaltFunction | null): this;
    setExecute(execute?: ContextMenuCommandExecuteFunction | null): this;
}
declare const ContextMenuCommandBuilder_base: import("ts-mixer/dist/types/types").Class<any[], discordjs.ContextMenuCommandBuilder & BaseCommandBuilder, typeof discordjs.ContextMenuCommandBuilder & typeof BaseCommandBuilder>;
export declare class ContextMenuCommandBuilder extends ContextMenuCommandBuilder_base {
    readonly commandType: CommandType.ContextMenuCommand;
    constructor(data?: Omit<Partial<ContextMenuCommandData>, 'commandType'>);
    setRequiredMemberPermissions(permissions?: discordjs.PermissionResolvable | null | undefined): this;
    toJSON(): discordjs.RESTPostAPIContextMenuApplicationCommandsJSONBody & BaseCommandBuilderData;
    setType(type: ContextMenuCommandType | 'User' | 'Message'): this;
    /**
     * Resolve a context menu command data and return a builder
     * @param contextMenuCommandResolvable Context menu command data
     */
    static resolve(contextMenuCommandResolvable: ContextMenuCommandResolvable): ContextMenuCommandBuilder;
    static isContextMenuCommandBuilder(data: any): data is ContextMenuCommandBuilder;
    /**
     * Execute a context menu command
     * @param client Current bot client
     * @param interaction Context menu command interaction
     * @param command Command builder resolvable of the command you wanna execute
     */
    static execute(client: RecipleClient, interaction: ContextMenuCommandInteraction, command?: ContextMenuCommandResolvable): Promise<ContextMenuCommandExecuteData | undefined>;
}
export {};
