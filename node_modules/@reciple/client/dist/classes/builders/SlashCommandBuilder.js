"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashCommandBuilder = void 0;
const discord_js_1 = __importStar(require("discord.js"));
const commands_1 = require("../../types/commands");
const BaseCommandBuilder_1 = require("./BaseCommandBuilder");
const halt_1 = require("../../types/halt");
const permissions_1 = require("../../utils/permissions");
const functions_1 = require("../../utils/functions");
const ts_mixer_1 = require("ts-mixer");
class SlashCommandBuilder extends (0, ts_mixer_1.Mixin)(discord_js_1.default.SlashCommandBuilder, BaseCommandBuilder_1.BaseCommandBuilder) {
    commandType = commands_1.CommandType.SlashCommand;
    constructor(data) {
        super(data);
        if (data?.name !== undefined)
            this.setName(data.name);
        if (data?.nameLocalizations !== undefined)
            this.setNameLocalizations(data.nameLocalizations);
        if (data?.description !== undefined)
            this.setDescription(data.description);
        if (data?.descriptionLocalizations !== undefined)
            this.setDescriptionLocalizations(data.descriptionLocalizations);
        if (data?.requiredMemberPermissions !== undefined || data?.defaultMemberPermissions !== undefined)
            this.setRequiredMemberPermissions(data?.requiredMemberPermissions ?? data?.defaultMemberPermissions);
        if (data?.dmPermission !== undefined)
            this.setDMPermission(data.dmPermission);
        if (data?.defaultPermission !== undefined)
            this.setDefaultPermission(data.defaultPermission);
        if (data?.requiredBotPermissions !== undefined)
            this.setRequiredBotPermissions(data.requiredBotPermissions);
        if (data?.options) {
            for (const option of data.options) {
                SlashCommandBuilder.addOption(this, (0, functions_1.isSlashCommandOption)(option) ? option : SlashCommandBuilder.resolveOption(option));
            }
        }
    }
    setRequiredMemberPermissions(permissions) {
        super.setRequiredMemberPermissions(permissions);
        this.setDefaultMemberPermissions(this.requiredMemberPermissions);
        return this;
    }
    toJSON() {
        return super.toJSON();
    }
    static addOption(builder, option) {
        if (option instanceof discord_js_1.SlashCommandAttachmentOption) {
            builder.addAttachmentOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandBooleanOption) {
            builder.addBooleanOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandChannelOption) {
            builder.addChannelOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandIntegerOption) {
            builder.addIntegerOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandMentionableOption) {
            builder.addMentionableOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandNumberOption) {
            builder.addNumberOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandRoleOption) {
            builder.addRoleOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandStringOption) {
            builder.addStringOption(option);
        }
        else if (option instanceof discord_js_1.SlashCommandUserOption) {
            builder.addUserOption(option);
        }
        else if (builder instanceof SlashCommandBuilder) {
            if (option instanceof discord_js_1.SlashCommandSubcommandBuilder) {
                builder.addSubcommand(option);
            }
            else if (option instanceof discord_js_1.SlashCommandSubcommandGroupBuilder) {
                builder.addSubcommandGroup(option);
            }
        }
        return builder;
    }
    static resolveOption(option) {
        let builder;
        // TODO: I can do better than this
        switch (option.type) {
            case discord_js_1.ApplicationCommandOptionType.Attachment:
                builder = new discord_js_1.SlashCommandAttachmentOption();
                break;
            case discord_js_1.ApplicationCommandOptionType.Boolean:
                builder = new discord_js_1.SlashCommandBooleanOption();
                break;
            case discord_js_1.ApplicationCommandOptionType.Channel:
                builder = new discord_js_1.SlashCommandChannelOption().addChannelTypes(...(option.channelTypes ?? []));
                break;
            case discord_js_1.ApplicationCommandOptionType.Integer:
                builder = new discord_js_1.SlashCommandIntegerOption().addChoices(...(option.choices ?? [])).setAutocomplete(!!option.autocomplete);
                if (option.maxValue)
                    builder.setMaxValue(option.maxValue);
                if (option.minValue)
                    builder.setMinValue(option.minValue);
                break;
            case discord_js_1.ApplicationCommandOptionType.Mentionable:
                builder = new discord_js_1.SlashCommandMentionableOption();
                break;
            case discord_js_1.ApplicationCommandOptionType.Number:
                builder = new discord_js_1.SlashCommandNumberOption().addChoices(...(option.choices ?? [])).setAutocomplete(!!option.autocomplete);
                if (option.maxValue)
                    builder.setMaxValue(option.maxValue);
                if (option.minValue)
                    builder.setMinValue(option.minValue);
                break;
            case discord_js_1.ApplicationCommandOptionType.Role:
                builder = new discord_js_1.SlashCommandRoleOption();
                break;
            case discord_js_1.ApplicationCommandOptionType.String:
                builder = new discord_js_1.SlashCommandStringOption().addChoices(...(option.choices ?? [])).setAutocomplete(!!option.autocomplete);
                if (option.maxLength)
                    builder.setMaxLength(option.maxLength);
                if (option.minLength)
                    builder.setMinLength(option.minLength);
                break;
            case discord_js_1.ApplicationCommandOptionType.User:
                builder = new discord_js_1.SlashCommandUserOption();
                break;
            case discord_js_1.ApplicationCommandOptionType.Subcommand:
                builder = new discord_js_1.SlashCommandSubcommandBuilder();
                for (const optionData of option.options ?? []) {
                    this.addOption(builder, this.resolveOption(optionData));
                }
                break;
            case discord_js_1.ApplicationCommandOptionType.SubcommandGroup:
                builder = new discord_js_1.SlashCommandSubcommandGroupBuilder();
                for (const subCommandData of option.options) {
                    builder.addSubcommand(subCommandData instanceof discord_js_1.SlashCommandSubcommandBuilder ? subCommandData : this.resolveOption(subCommandData));
                }
                break;
            default:
                throw new TypeError('Unknown option data');
        }
        if (!(builder instanceof discord_js_1.SlashCommandSubcommandBuilder) && !(builder instanceof discord_js_1.SlashCommandSubcommandGroupBuilder) && option.type !== discord_js_1.ApplicationCommandOptionType.Subcommand && option.type !== discord_js_1.ApplicationCommandOptionType.SubcommandGroup) {
            builder.setRequired(option.required ?? false);
        }
        return builder
            .setName(option.name)
            .setDescription(option.description)
            .setNameLocalizations(option.nameLocalizations ?? null)
            .setDescriptionLocalizations(option.descriptionLocalizations ?? null);
    }
    /**
     * Resolves a slash command data and return a builder
     * @param slashCommandResolvable Slash command data
     */
    static resolve(slashCommandResolvable) {
        return this.isSlashCommandBuilder(slashCommandResolvable) ? slashCommandResolvable : new SlashCommandBuilder(slashCommandResolvable);
    }
    static isSlashCommandBuilder(data) {
        return data instanceof SlashCommandBuilder;
    }
    /**
     * Execute a slash command
     * @param client Current bot client
     * @param interaction Command interaction
     * @param command Command builder resolvable of the command you wanna execute
     */
    static async execute(client, interaction, command) {
        if (client.config?.commands?.slashCommand?.enabled === false)
            return;
        if (client.config?.commands?.slashCommand?.acceptRepliedInteractions === false && (interaction.replied || interaction.deferred))
            return;
        const builder = command ? this.resolve(command) : client.commands.get(interaction.commandName, commands_1.CommandType.SlashCommand);
        if (!builder)
            return;
        const executeData = {
            builder,
            commandType: builder.commandType,
            interaction,
            client
        };
        if (client.config.commands?.slashCommand?.enableCooldown !== false && builder.cooldown) {
            const cooldownData = {
                command: builder.name,
                user: interaction.user,
                type: builder.commandType
            };
            if (!client.cooldowns.isCooledDown(cooldownData)) {
                client.cooldowns.add({ ...cooldownData, endsAt: new Date(Date.now() + builder.cooldown) });
            }
            else {
                await client._haltCommand(builder, {
                    commandType: builder.commandType,
                    reason: halt_1.CommandHaltReason.Cooldown,
                    cooldownData: client.cooldowns.get(cooldownData),
                    executeData
                });
                return;
            }
        }
        if (builder.requiredBotPermissions !== undefined && interaction.inGuild()) {
            const isBotExecuteAllowed = (0, permissions_1.botHasPermissionsToExecute)((interaction.channel || interaction.guild), builder.requiredBotPermissions);
            if (!isBotExecuteAllowed) {
                await client._haltCommand(builder, {
                    commandType: builder.commandType,
                    reason: halt_1.CommandHaltReason.MissingBotPermissions,
                    executeData
                });
                return;
            }
        }
        const precondition = await client._executeCommandPrecondition(builder, executeData);
        if (!precondition)
            return;
        return (await client._executeCommand(builder, executeData)) ? executeData : undefined;
    }
}
exports.SlashCommandBuilder = SlashCommandBuilder;
//# sourceMappingURL=SlashCommandBuilder.js.map