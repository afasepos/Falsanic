"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageCommandOptionBuilder = void 0;
class MessageCommandOptionBuilder {
    name = '';
    description = '';
    required = false;
    validator;
    constructor(data) {
        if (data?.name !== undefined)
            this.setName(data.name);
        if (data?.description !== undefined)
            this.setDescription(data.description);
        if (data?.required !== undefined)
            this.setRequired(data.required);
        if (data?.validator !== undefined)
            this.setValidator(data.validator);
    }
    /**
     * Sets the option name
     * @param name The option name
     */
    setName(name) {
        this.name = name;
        return this;
    }
    /**
     * Sets the option description
     * @param description The option description
     */
    setDescription(description) {
        this.description = description;
        return this;
    }
    /**
     * Sets whether the option is required
     * @param required Is the option required
     */
    setRequired(required) {
        this.required = required;
        return this;
    }
    /**
     * Sets the option value validator function
     * @param validator The validate function
     */
    setValidator(validator) {
        this.validator = validator;
        return this;
    }
    toJSON() {
        return {
            name: this.name,
            description: this.description,
            required: this.required,
            validator: this.validator
        };
    }
    /**
     * Resolve a message command option data and return a builder
     * @param optionResolvable Message command data
     */
    static resolve(optionResolvable) {
        return optionResolvable instanceof MessageCommandOptionBuilder ? optionResolvable : new MessageCommandOptionBuilder(optionResolvable);
    }
    /**
     * Validates a message command option value
     * @param option The option data
     * @param message The command message
     * @param value The option value
     */
    static async validateOptionValue(option, message, value) {
        const validatedOption = {
            name: option.name,
            builder: MessageCommandOptionBuilder.resolve(option),
            value,
            invalid: false,
            missing: false,
        };
        if (value == undefined && option.required) {
            validatedOption.missing = true;
            return validatedOption;
        }
        if (value == undefined && !option.required)
            return validatedOption;
        const validate = option.validator !== undefined ? await Promise.resolve(option.validator(value ?? '', message)) : true;
        if (!validate)
            validatedOption.invalid = true;
        return validatedOption;
    }
}
exports.MessageCommandOptionBuilder = MessageCommandOptionBuilder;
//# sourceMappingURL=MessageCommandOptionBuilder.js.map