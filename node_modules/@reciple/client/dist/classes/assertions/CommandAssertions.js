"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandAssertions = void 0;
const commands_1 = require("../../types/commands");
const predicates_1 = require("../../utils/predicates");
const discord_js_1 = require("discord.js");
const shapeshift_1 = require("@sapphire/shapeshift");
class CommandAssertions {
    static validateCommandType(commandType) {
        shapeshift_1.s.nativeEnum(commands_1.CommandType).setValidationEnabled(discord_js_1.isValidationEnabled).parse(commandType);
    }
    static validateCommandCooldown(cooldown) {
        predicates_1.commandCooldownPredicate.setValidationEnabled(discord_js_1.isValidationEnabled).parse(cooldown);
    }
    static validateCommandRequiredBotPermissions(permissions) {
        predicates_1.permissionResolvablePredicate.optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(permissions);
    }
    static validateCommandRequiredMemberPermissions(permissions) {
        predicates_1.permissionResolvablePredicate.optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(permissions);
    }
    static validateCommandExecute(execute) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(execute);
    }
    static validateCommandHalt(halt) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(halt);
    }
    static validateCommand(command) {
        const cmd = command;
        this.validateCommandType(cmd?.commandType);
        this.validateCommandCooldown(cmd?.commandType);
        this.validateCommandRequiredBotPermissions(cmd?.requiredBotPermissions);
        this.validateCommandRequiredMemberPermissions(cmd?.requiredMemberPermissions);
        this.validateCommandExecute(cmd?.execute);
        this.validateCommandHalt(cmd?.halt);
    }
}
exports.CommandAssertions = CommandAssertions;
//# sourceMappingURL=CommandAssertions.js.map