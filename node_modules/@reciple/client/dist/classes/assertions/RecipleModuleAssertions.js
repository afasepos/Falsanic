"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecipleModuleAssertions = void 0;
const predicates_1 = require("../../utils/predicates");
const CommandAssertions_1 = require("./CommandAssertions");
const discord_js_1 = require("discord.js");
const shapeshift_1 = require("@sapphire/shapeshift");
class RecipleModuleAssertions {
    static validateModuleScriptVersions(versions) {
        predicates_1.recipleModuleVersionsPredicate.setValidationEnabled(discord_js_1.isValidationEnabled).parse(versions);
    }
    static validateModuleOnStart(onStart) {
        shapeshift_1.s.instance(Function).setValidationEnabled(discord_js_1.isValidationEnabled).parse(onStart);
    }
    static validateModuleOnLoad(onLoad) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(onLoad);
    }
    static validateModuleOnUnload(onUnload) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(onUnload);
    }
    static validateModuleContextMenuCommandPrecondition(precondition) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(precondition);
    }
    static validateModuleMessageCommandPrecondition(precondition) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(precondition);
    }
    static validateModuleSlashCommandPrecondition(precondition) {
        shapeshift_1.s.instance(Function).optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(precondition);
    }
    static validateModuleScript(moduleScript, validateCommands = false) {
        const script = moduleScript;
        this.validateModuleScriptVersions(script?.versions);
        // commands
        shapeshift_1.s.unknown.array.optional.setValidationEnabled(discord_js_1.isValidationEnabled).parse(script?.commands);
        if (validateCommands && script.commands) {
            for (const command of script.commands) {
                CommandAssertions_1.CommandAssertions.validateCommand(command);
            }
        }
        this.validateModuleOnStart(script.onStart);
        this.validateModuleOnLoad(script?.onLoad);
        this.validateModuleOnUnload(script?.onUnload);
        this.validateModuleContextMenuCommandPrecondition(script?.contextMenuCommandPrecondition);
        this.validateModuleMessageCommandPrecondition(script?.messageCommandPrecondition);
        this.validateModuleSlashCommandPrecondition(script?.slashCommandPrecondition);
    }
}
exports.RecipleModuleAssertions = RecipleModuleAssertions;
//# sourceMappingURL=RecipleModuleAssertions.js.map