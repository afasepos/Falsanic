import { ApplicationCommand, ApplicationCommandDataResolvable, ChatInputCommandInteraction, Collection, ContextMenuCommandInteraction, Message, RestOrArray } from 'discord.js';
import { AnyCommandBuilder, AnyCommandData, AnyCommandExecuteData, AnyCommandPreconditionFunction, CommandType } from '../../types/commands';
import { AnySlashCommandBuilder, SlashCommandPreconditionFunction, SlashCommandResolvable } from '../builders/SlashCommandBuilder';
import { ContextMenuCommandBuilder, ContextMenuCommandPreconditionFunction, ContextMenuCommandResolvable } from '../builders/ContextMenuCommandBuilder';
import { MessageCommandBuilder, MessageCommandPreconditionFunction, MessageCommandResovable } from '../builders/MessageCommandBuilder';
import { RecipleCommandsRegisterOptions } from '../../types/options';
import { RecipleClient } from '../RecipleClient';
export interface CommandManagerOptions {
    client: RecipleClient;
    contextMenuCommands?: ContextMenuCommandResolvable[];
    messageCommands?: MessageCommandResovable[];
    slashCommands?: SlashCommandResolvable[];
    additionalApplicationCommands?: ApplicationCommandDataResolvable[];
}
export declare class CommandManager {
    readonly client: RecipleClient;
    readonly contextMenuCommands: Collection<string, ContextMenuCommandBuilder>;
    readonly messageCommands: Collection<string, MessageCommandBuilder>;
    readonly slashCommands: Collection<string, AnySlashCommandBuilder>;
    readonly additionalApplicationCommands: ApplicationCommandDataResolvable[];
    globalContextMenuCommandPrecondition?: ContextMenuCommandPreconditionFunction;
    globalMessageCommandPrecondition?: MessageCommandPreconditionFunction;
    globalSlashCommandPrecondition?: SlashCommandPreconditionFunction;
    get size(): number;
    constructor(options: CommandManagerOptions);
    add(...commands: RestOrArray<AnyCommandBuilder | AnyCommandData>): this;
    addAdditionalApplicationCommands(...commands: RestOrArray<ApplicationCommandDataResolvable>): this;
    setGlobalPrecondition(commandType: CommandType.ContextMenuCommand, precondition: null | undefined | ContextMenuCommandPreconditionFunction): void;
    setGlobalPrecondition(commandType: CommandType.MessageCommand, precondition: null | undefined | MessageCommandPreconditionFunction): void;
    setGlobalPrecondition(commandType: CommandType.SlashCommand, precondition: null | undefined | SlashCommandPreconditionFunction): void;
    getGlobalPrecondition(commandType: CommandType.ContextMenuCommand): ContextMenuCommandPreconditionFunction;
    getGlobalPrecondition(commandType: CommandType.MessageCommand): MessageCommandPreconditionFunction;
    getGlobalPrecondition(commandType: CommandType.SlashCommand): SlashCommandPreconditionFunction;
    getGlobalPrecondition(commandType: CommandType): AnyCommandPreconditionFunction;
    get(command: string, type: CommandType.ContextMenuCommand): ContextMenuCommandBuilder | undefined;
    get(command: string, type: CommandType.MessageCommand): MessageCommandBuilder | undefined;
    get(command: string, type: CommandType.SlashCommand): AnySlashCommandBuilder | undefined;
    registerApplicationCommands(options?: RecipleCommandsRegisterOptions): Promise<{
        global: Collection<string, ApplicationCommand>;
        guilds: Collection<string, Collection<string, ApplicationCommand>>;
    }>;
    execute(trigger: ContextMenuCommandInteraction | Message | ChatInputCommandInteraction): Promise<AnyCommandExecuteData | undefined>;
    getApplicationCommand(command: string | AnyCommandData | AnyCommandBuilder, guildId?: string): ApplicationCommand | undefined;
    fetchApplicationCommand(command: string | AnyCommandData | AnyCommandBuilder, guildId?: string): Promise<ApplicationCommand | undefined>;
    private _parseApplicationCommands;
}
