import { Guild, RestOrArray, TextBasedChannel, User } from 'discord.js';
import { CommandType } from '../../types/commands';
export interface CommandCooldownData {
    /**
     * The user who is on cooldown.
     */
    user: User;
    /**
     * The name of the command that is on cooldown.
     */
    command?: string;
    /**
     * The type of command that is on cooldown.
     */
    type?: CommandType;
    /**
     * The guild where the command cooldown is active.
     */
    guild?: Guild;
    /**
     * The channel where the command cooldown is active.
     */
    channel?: TextBasedChannel;
    /**
     * The date and time when the command cooldown will expire.
     */
    endsAt: Date;
}
export declare class CommandCooldownManager extends Array<CommandCooldownData> {
    private _sweeperTimer?;
    constructor(...data: RestOrArray<CommandCooldownData>);
    add(...data: RestOrArray<CommandCooldownData>): number;
    get(options: Partial<Omit<CommandCooldownData, 'expireTime'>> | string): CommandCooldownData | undefined;
    isCooledDown(options: Partial<Omit<CommandCooldownData, 'expireTime'>>): boolean;
    remove(options: Partial<CommandCooldownData>, limit?: number): CommandCooldownData[];
    clean(options?: Partial<Omit<CommandCooldownData, 'expireTime'>>): void;
    setSweeperTimer(timer?: number | null): void;
    static checkOptions(options: Partial<Omit<CommandCooldownData, 'endsAt'>>, data: CommandCooldownData): boolean;
}
