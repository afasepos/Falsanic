"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandCooldownManager = void 0;
const discord_js_1 = require("discord.js");
class CommandCooldownManager extends Array {
    _sweeperTimer;
    constructor(...data) {
        super(...(0, discord_js_1.normalizeArray)(data));
    }
    add(...data) {
        return this.push(...(0, discord_js_1.normalizeArray)(data));
    }
    get(options) {
        return this.find(data => typeof options === 'string' ? data.user.id === options : CommandCooldownManager.checkOptions(options, data));
    }
    isCooledDown(options) {
        const data = this.get(options);
        if (!data)
            return false;
        this.remove({
            ...data,
            channel: undefined,
            guild: undefined,
            type: undefined,
            command: undefined,
        });
        return data.endsAt.getTime() > Date.now();
    }
    remove(options, limit = 0) {
        if (!Object.keys(options).length)
            throw new TypeError('Provide atleast one option to remove cooldown data.');
        const removed = [];
        for (let i = 0; i < this.length; i++) {
            if (!CommandCooldownManager.checkOptions(options, this[i]))
                continue;
            if (this[i].endsAt.getTime() > Date.now())
                continue;
            if (limit && i >= limit)
                continue;
            removed.push(this[i]);
            this.splice(i, 1);
        }
        return removed;
    }
    clean(options) {
        for (let i = 0; i < this.length; i++) {
            if (!this[i] || options && !CommandCooldownManager.checkOptions(options, this[i]))
                return;
            if (this[i].endsAt.getTime() > Date.now())
                return;
            this.splice(i, 1);
        }
    }
    setSweeperTimer(timer) {
        if (this._sweeperTimer) {
            clearInterval(this._sweeperTimer);
            this._sweeperTimer = undefined;
        }
        if (!timer)
            return;
        this._sweeperTimer = setInterval(() => this.clean(), timer);
        this._sweeperTimer.unref();
    }
    static checkOptions(options, data) {
        if (options?.user !== undefined && options.user.id !== data.user.id)
            return false;
        if (options?.guild !== undefined && options.guild?.id !== data.guild?.id)
            return false;
        if (options?.channel !== undefined && options.channel.id !== data.channel?.id)
            return false;
        if (options?.command !== undefined && options.command !== data.command)
            return false;
        if (options?.type !== undefined && options.type !== data.type)
            return false;
        return true;
    }
}
exports.CommandCooldownManager = CommandCooldownManager;
//# sourceMappingURL=CommandCooldownManager.js.map