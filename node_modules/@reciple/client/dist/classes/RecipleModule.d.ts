import { AnyCommandBuilder, AnyCommandData, AnyCommandExecuteData } from '../types/commands';
import { ContextMenuCommandExecuteData } from './builders/ContextMenuCommandBuilder';
import { MessageCommandExecuteData } from './builders/MessageCommandBuilder';
import { SlashCommandExecuteData } from './builders/SlashCommandBuilder';
import { RecipleClient } from '../classes/RecipleClient';
export interface RecipleModuleScript {
    /**
     * The versions of the Reciple client that the module script is compatible with. The versions can be a string or an array of strings.
     */
    versions: string | string[];
    /**
     * The commands that are defined by the module script.
     */
    commands?: (AnyCommandBuilder | AnyCommandData)[];
    /**
     * The function that is called when the module script is started. The function must return a boolean value or a promise that resolves to a boolean value. The boolean value indicates whether the module script was started successfully.
     * @param client The client that the module script is running on
     * @param _module The module that the module script is associated with
     */
    onStart(client: RecipleClient<false>, _module: RecipleModule): boolean | Promise<boolean>;
    /**
     * The function that is called when the module script is loaded.
     * @param client The client that the module script is running on
     * @param _module The module that the module script is associated with
     */
    onLoad?(client: RecipleClient<true>, _module: RecipleModule): void | Promise<void>;
    /**
     * The function that is called when the module script is unloaded.
     * @param unloadData The unload data contains information about why the module script is being unloaded.
     */
    onUnload?(unloadData: RecipleModuleScriptUnloadData): void | Promise<void>;
    contextMenuCommandPrecondition?(executeData: ContextMenuCommandExecuteData): boolean | Promise<boolean>;
    messageCommandPrecondition?(executeData: MessageCommandExecuteData): boolean | Promise<boolean>;
    slashCommandPrecondition?(executeData: SlashCommandExecuteData): boolean | Promise<boolean>;
}
export interface RecipleModuleScriptUnloadData {
    /**
     * The client that the module script was running on.
     */
    client: RecipleClient<true>;
    /**
     * The reason why the module script was unloaded.
     */
    reason?: string;
    /**
     * The module that was unloaded.
     */
    module: RecipleModule;
}
export interface RecipleModuleOptions<S extends RecipleModuleScript = RecipleModuleScript> {
    client: RecipleClient;
    script: S;
    filePath?: string;
}
export declare class RecipleModule<S extends RecipleModuleScript = RecipleModuleScript> {
    private _script;
    readonly id: string;
    readonly client: RecipleClient;
    readonly filePath?: string;
    commands: AnyCommandBuilder[];
    get script(): S;
    constructor(options: RecipleModuleOptions<S>);
    get versions(): string[];
    get displayName(): string;
    get isSupported(): boolean;
    start(): Promise<boolean>;
    load(resolveCommands?: boolean): Promise<void>;
    unload(reason?: string): Promise<void>;
    contextMenuCommandPrecondition(execute: ContextMenuCommandExecuteData): Promise<boolean>;
    messageCommandPrecondition(execute: MessageCommandExecuteData): Promise<boolean>;
    slashCommandPrecondition(execute: SlashCommandExecuteData): Promise<boolean>;
    executePrecondition(executeData: AnyCommandExecuteData): Promise<boolean>;
    resolveCommands(): AnyCommandBuilder[];
    toString(): string;
}
