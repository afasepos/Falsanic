import { ContextMenuCommandExecuteData, ContextMenuCommandHaltData, ContextMenuCommandResolvable } from './builders/ContextMenuCommandBuilder';
import { MessageCommandExecuteData, MessageCommandHaltData, MessageCommandResovable } from './builders/MessageCommandBuilder';
import { AnyCommandExecuteData, AnyCommandHaltData } from '../types/commands';
import { SlashCommandExecuteData, SlashCommandHaltData, SlashCommandResolvable } from './builders/SlashCommandBuilder';
import discordjs, { ApplicationCommand, Awaitable, ClientEvents, Collection } from 'discord.js';
import { RecipleClientOptions, RecipleConfigOptions } from '../types/options';
import { CommandCooldownManager } from './managers/CommandCooldownManager';
import { CommandManager } from './managers/CommandManager';
import { ModuleManager } from './managers/ModuleManager';
import { Logger } from 'fallout-utility';
export interface RecipleClient<Ready extends boolean = boolean> extends discordjs.Client<Ready> {
    on<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    on<E extends string | symbol>(event: E, listener: (...args: any) => Awaitable<void>): this;
    once<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    once<E extends string | symbol>(event: E, listener: (...args: any) => Awaitable<void>): this;
    emit<E extends keyof RecipleClientEvents>(event: E, ...args: RecipleClientEvents[E]): boolean;
    emit<E extends string | symbol>(event: E, ...args: any): boolean;
    off<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    off<E extends string | symbol>(event: E, listener: (...args: any) => Awaitable<void>): this;
    removeAllListeners<E extends keyof RecipleClientEvents>(event?: E): this;
    removeAllListeners(event?: string | symbol): this;
    removeListener<E extends keyof RecipleClientEvents>(event: E, listener: Function): this;
    removeListener(event: string | symbol, listener: Function): this;
}
export interface RecipleClientEvents extends ClientEvents {
    recipleCommandExecute: [executeData: AnyCommandExecuteData];
    recipleCommandHalt: [haltData: AnyCommandHaltData];
    recipleCommandPrecondition: [executeData: AnyCommandExecuteData];
    recipleRegisterApplicationCommands: [commands: Collection<string, ApplicationCommand>, guildId?: string];
    recipleError: [error: Error];
    recipleDebug: [message: string];
}
export declare class RecipleClient<Ready extends boolean = boolean> extends discordjs.Client<Ready> {
    readonly config: RecipleConfigOptions & {
        [key: string]: any;
    };
    readonly modules: ModuleManager;
    readonly commands: CommandManager;
    readonly cooldowns: CommandCooldownManager;
    readonly logger?: Logger;
    readonly version: string;
    constructor(options: RecipleClientOptions);
    isReady(): this is RecipleClient<true>;
    _throwError(error: Error, throwWhenNoListener?: boolean): void;
    _haltCommand(command: ContextMenuCommandResolvable, haltData: ContextMenuCommandHaltData): Promise<boolean>;
    _haltCommand(command: MessageCommandResovable, haltData: MessageCommandHaltData): Promise<boolean>;
    _haltCommand(command: SlashCommandResolvable, haltData: SlashCommandHaltData): Promise<boolean>;
    _executeCommand(command: ContextMenuCommandResolvable, executeData: ContextMenuCommandExecuteData): Promise<boolean>;
    _executeCommand(command: MessageCommandResovable, executeData: MessageCommandExecuteData): Promise<boolean>;
    _executeCommand(command: SlashCommandResolvable, executeData: SlashCommandExecuteData): Promise<boolean>;
    _executeCommandPrecondition(command: ContextMenuCommandResolvable, executeData: ContextMenuCommandExecuteData): Promise<boolean>;
    _executeCommandPrecondition(command: MessageCommandResovable, executeData: MessageCommandExecuteData): Promise<boolean>;
    _executeCommandPrecondition(command: SlashCommandResolvable, executeData: SlashCommandExecuteData): Promise<boolean>;
    login(token?: string): Promise<string>;
}
