import { AnyCommandBuilder, AnyCommandData } from '../../types/commands';
export interface RecipleErrorOptions {
    message: string;
    name?: string;
    cause?: unknown;
}
export declare class RecipleError extends Error {
    get cleanStack(): string | undefined;
    constructor(options: RecipleErrorOptions | string);
    toString(): string;
    static createUnknownCommandTypeErrorOptions(given: unknown): RecipleErrorOptions;
    static createCommandExecuteErrorOptions(builder: AnyCommandBuilder | AnyCommandData, cause: unknown): RecipleErrorOptions;
    static createCommandHaltErrorOptions(builder: AnyCommandBuilder | AnyCommandData, cause: unknown): RecipleErrorOptions;
    static createCommandPreconditionErrorOptions(builder: AnyCommandBuilder | AnyCommandData, cause: unknown): RecipleErrorOptions;
    static createCommandRequiredOptionNotFoundErrorOptions(optionName: string, value: unknown): RecipleErrorOptions;
    static createLoadModuleFailErrorOptions(moduleDisplayName: string, cause: unknown): RecipleErrorOptions;
    static createUnsupportedModuleErrorOptions(moduleDisplayName: string): RecipleErrorOptions;
}
