/// <reference types="mongoose/types/aggregate" />
/// <reference types="mongoose/types/callback" />
/// <reference types="mongoose/types/collection" />
/// <reference types="mongoose/types/connection" />
/// <reference types="mongoose/types/cursor" />
/// <reference types="mongoose/types/document" />
/// <reference types="mongoose/types/error" />
/// <reference types="mongoose/types/expressions" />
/// <reference types="mongoose/types/helpers" />
/// <reference types="mongoose/types/middlewares" />
/// <reference types="mongoose/types/indexes" />
/// <reference types="mongoose/types/models" />
/// <reference types="mongoose/types/mongooseoptions" />
/// <reference types="mongoose/types/pipelinestage" />
/// <reference types="mongoose/types/populate" />
/// <reference types="mongoose/types/query" />
/// <reference types="mongoose/types/schemaoptions" />
/// <reference types="mongoose/types/schematypes" />
/// <reference types="mongoose/types/session" />
/// <reference types="mongoose/types/types" />
/// <reference types="mongoose/types/utility" />
/// <reference types="mongoose/types/validation" />
/// <reference types="mongoose/types/virtuals" />
/// <reference types="mongoose/types/inferschematype" />
import { InferSchemaType, Model, Mongoose, Schema } from 'mongoose';
import { BaseDatabaseAdapter } from '../BaseDatabaseAdapter';
import { IGiveaway, IGiveawayEntry } from '../../types/giveaway';
import { JSONEncodable } from 'discord.js';
import { GiveawayManager } from '../GiveawayManager';
export interface MongodbDatabaseAdapterOptions {
    mongooseConnection: Mongoose | string;
    giveawaysModel?: Model<RawMongodbGiveaway>;
    giveawayEntriesModel?: Model<RawMongodbGiveawayEntry>;
}
export type RawMongodbGiveaway = InferSchemaType<MongodbDatabaseAdapter['giveawaySchema']>;
export type RawMongodbGiveawayEntry = InferSchemaType<MongodbDatabaseAdapter['giveawayEntrySchema']>;
export declare class MongodbDatabaseAdapter extends BaseDatabaseAdapter {
    readonly options: MongodbDatabaseAdapterOptions;
    mongoose?: Mongoose;
    giveawaysModel: Model<RawMongodbGiveaway>;
    giveawayEntriesModel: Model<RawMongodbGiveawayEntry>;
    constructor(options: MongodbDatabaseAdapterOptions);
    start(manager: GiveawayManager<this>): Promise<void>;
    fetchGiveaways(options?: {
        filter?: Partial<IGiveaway>;
        count?: number;
    }): Promise<IGiveaway[]>;
    fetchGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    createGiveaway(data: IGiveaway): Promise<IGiveaway>;
    updateGiveaway(giveawayId: string, data: Partial<IGiveaway>): Promise<IGiveaway>;
    deleteGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    deleteGiveaway(filter: Partial<IGiveaway>, count?: number): Promise<IGiveaway[]>;
    fetchGiveawayEntries(options: {
        filter?: Partial<IGiveawayEntry>;
        count?: number;
    }): Promise<IGiveawayEntry[]>;
    fetchGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    createGiveawayEntry(giveawayId: string, data: IGiveawayEntry): Promise<IGiveawayEntry>;
    updateGiveawayEntry(entryId: string, data: Partial<IGiveawayEntry>): Promise<IGiveawayEntry>;
    deleteGiveawayEntry(giveawayId: string): Promise<IGiveawayEntry | undefined>;
    deleteGiveawayEntry(filter: Partial<IGiveawayEntry>, count?: number): Promise<IGiveawayEntry[]>;
    static parseGiveawayDocument(document: RawMongodbGiveaway | JSONEncodable<RawMongodbGiveaway>): IGiveaway;
    static parseGiveawayObject(data: IGiveaway | JSONEncodable<IGiveaway>): RawMongodbGiveaway;
    static parseGiveawayObject(data: Partial<IGiveaway> | JSONEncodable<Partial<IGiveaway>>): Partial<RawMongodbGiveaway>;
    static parseGiveawayEntryDocument(document: RawMongodbGiveawayEntry | JSONEncodable<RawMongodbGiveawayEntry>): IGiveawayEntry;
    static parseGiveawayEntryObject(data: IGiveawayEntry | JSONEncodable<IGiveawayEntry>): RawMongodbGiveawayEntry;
    static parseGiveawayEntryObject(data: Partial<IGiveawayEntry> | JSONEncodable<Partial<IGiveawayEntry>>): Partial<RawMongodbGiveawayEntry>;
    static ObjectId: typeof Schema.Types.ObjectId;
    static giveawaySchema: Schema<any, Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    }, import("mongoose").Document<unknown, {}, {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    }> & {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    } & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    static giveawayEntrySchema: Schema<any, Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    }, import("mongoose").Document<unknown, {}, {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    }> & {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    } & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    giveawaySchema: Schema<any, Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    }, import("mongoose").Document<unknown, {}, {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    }> & {
        id: string;
        name: string;
        ended: boolean;
        channel_id: string;
        guild_id: string;
        message_id: string;
        winner_count: number;
        ends_at: Date;
        created_at: Date;
        winners_entry_id: string[];
        author_id?: string | undefined;
        ended_at?: Date | undefined;
    } & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    giveawayEntrySchema: Schema<any, Model<any, any, any, any, any, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    }, import("mongoose").Document<unknown, {}, {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    }> & {
        id: string;
        created_at: Date;
        giveaway_id: string;
        user_id: string;
    } & {
        _id: import("mongoose").Types.ObjectId;
    }>;
}
