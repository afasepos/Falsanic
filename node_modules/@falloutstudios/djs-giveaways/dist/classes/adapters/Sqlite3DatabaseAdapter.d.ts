import { IGiveaway, IGiveawayEntry } from '../../types/giveaway';
import { BaseDatabaseAdapter } from '../BaseDatabaseAdapter';
import { GiveawayManager } from '../GiveawayManager';
import type Sqlite3 from 'better-sqlite3';
export interface Sqlite3DatabaseAdapterOptions {
    file?: string;
    databaseOptions?: Sqlite3.Options;
}
export interface RawSqlite3Giveaway extends Omit<IGiveaway, 'endsAt' | 'createdAt' | 'endedAt' | 'winnersEntryId' | 'ended'> {
    endsAt: string;
    createdAt: string;
    ended: 'true' | 'false';
    endedAt: string | null;
    winnersEntryId: string;
}
export interface RawSqlite3GiveawayEntry extends Omit<IGiveawayEntry, 'createdAt'> {
    createdAt: string;
}
export declare class Sqlite3DatabaseAdapter extends BaseDatabaseAdapter {
    readonly file: string;
    readonly database: Sqlite3.Database;
    constructor(options?: Sqlite3DatabaseAdapterOptions);
    start(manager: GiveawayManager<this>): Promise<void>;
    fetchGiveaways(options?: {
        filter?: Partial<IGiveaway> | undefined;
        count?: number | undefined;
    } | undefined): Promise<IGiveaway[]>;
    fetchGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    createGiveaway(data: IGiveaway): Promise<IGiveaway>;
    updateGiveaway(giveawayId: string, data: Partial<IGiveaway>): Promise<IGiveaway>;
    deleteGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    deleteGiveaway(filter: Partial<IGiveaway>, count?: number): Promise<IGiveaway[]>;
    fetchGiveawayEntries(options?: {
        filter?: Partial<IGiveawayEntry> | undefined;
        count?: number | undefined;
    } | undefined): Promise<IGiveawayEntry[]>;
    fetchGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    createGiveawayEntry(giveawayId: string, data: IGiveawayEntry): Promise<IGiveawayEntry>;
    updateGiveawayEntry(entryId: string, data: Partial<IGiveawayEntry>): Promise<IGiveawayEntry>;
    deleteGiveawayEntry(giveawayId: string): Promise<IGiveawayEntry | undefined>;
    deleteGiveawayEntry(filter: Partial<IGiveawayEntry>, count?: number): Promise<IGiveawayEntry[]>;
    static parseGiveaway(giveaway: IGiveaway): RawSqlite3Giveaway;
    static parseGiveaway(giveaway: RawSqlite3Giveaway): IGiveaway;
    static parseGiveawayEntry(entry: IGiveawayEntry): RawSqlite3GiveawayEntry;
    static parseGiveawayEntry(entry: RawSqlite3GiveawayEntry): IGiveawayEntry;
    static parseDate(date: Date): string;
    static parseDate(date: string): Date;
    static parseDate(date: string | Date): string | Date;
    static parseValue(value: string | string[] | number | boolean | Date | null): string | number | null;
}
