import { IGiveaway, IGiveawayEntry } from '../../types/giveaway';
import { BaseDatabaseAdapter } from '../BaseDatabaseAdapter';
export interface JsonDatabaseSchema {
    giveaways: RawJsonGiveaway[];
    entries: RawJsonGiveawayEntry[];
}
export interface RawJsonGiveaway extends Omit<IGiveaway, 'endsAt' | 'createdAt' | 'endedAt'> {
    endsAt: string;
    createdAt: string;
    endedAt: string | null;
}
export interface RawJsonGiveawayEntry extends Omit<IGiveawayEntry, 'createdAt'> {
    createdAt: string;
}
export interface JsonDatabaseAdapterOptions {
    file?: string;
    parser?: {
        parse(data: string): JsonDatabaseSchema;
        stringify(data: JsonDatabaseSchema): string;
    };
}
export declare class JsonDatabaseAdapter extends BaseDatabaseAdapter {
    private _raw;
    readonly file: string;
    readonly parser: Exclude<JsonDatabaseAdapterOptions['parser'], undefined>;
    get data(): {
        giveaways: IGiveaway[];
        entries: IGiveawayEntry[];
    };
    get giveaways(): IGiveaway[];
    get entries(): IGiveawayEntry[];
    constructor(options?: JsonDatabaseAdapterOptions);
    fetchJson(): Promise<JsonDatabaseSchema>;
    saveJson(data?: JsonDatabaseSchema): Promise<JsonDatabaseSchema>;
    fetchGiveaways(options?: {
        filter?: Partial<IGiveaway>;
        count?: number;
    }): Promise<IGiveaway[]>;
    fetchGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    createGiveaway(data: IGiveaway): Promise<IGiveaway>;
    updateGiveaway(giveawayId: string, data: Partial<IGiveaway>): Promise<IGiveaway>;
    deleteGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    deleteGiveaway(filter: Partial<IGiveaway>, count?: number): Promise<IGiveaway[]>;
    fetchGiveawayEntries(options: {
        filter?: Partial<IGiveawayEntry>;
        count?: number;
    }): Promise<IGiveawayEntry[]>;
    fetchGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    createGiveawayEntry(giveawayId: string, data: IGiveawayEntry): Promise<IGiveawayEntry>;
    updateGiveawayEntry(entryId: string, data: Partial<IGiveawayEntry>): Promise<IGiveawayEntry>;
    deleteGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    deleteGiveawayEntry(filter: Partial<IGiveawayEntry>, count?: number): Promise<IGiveawayEntry[]>;
    static parseGiveaway(giveaway: IGiveaway): RawJsonGiveaway;
    static parseGiveaway(giveaway: RawJsonGiveaway): IGiveaway;
    static parseGiveawayEntry(entry: IGiveawayEntry): RawJsonGiveawayEntry;
    static parseGiveawayEntry(entry: RawJsonGiveawayEntry): IGiveawayEntry;
    static parseDate(date: Date): string;
    static parseDate(date: string): Date;
    static parseDate(date: string | Date): string | Date;
}
