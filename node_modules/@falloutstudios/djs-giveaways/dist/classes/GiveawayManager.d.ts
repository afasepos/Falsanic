/// <reference types="node" />
import { Awaitable, BaseMessageOptions, ButtonInteraction, Client, Collection, Message } from 'discord.js';
import { CreateGiveawayMessageOptions, CreateGiveawayOptions, IGiveaway, IGiveawayEntry } from '../types/giveaway';
import { TypedEmitter } from 'fallout-utility';
import { BaseDatabaseAdapter } from './BaseDatabaseAdapter';
export interface GiveawayManagerEvents {
    error: [error: Error];
    giveawayCreate: [giveaway: IGiveaway];
    giveawayEnd: [giveaway: IGiveaway, entries: {
        entries: IGiveawayEntry[];
        selected: IGiveawayEntry[];
    }];
    giveawayDelete: [giveaway: IGiveaway];
    giveawayEntryAdd: [entry: IGiveawayEntry, giveawayId: string];
    giveawayEntryDelete: [entry: IGiveawayEntry, giveawayId: string];
}
export interface GiveawayManagerOptions<A extends BaseDatabaseAdapter = BaseDatabaseAdapter> {
    databaseAdapter: A;
    client: Client;
    joinButtonCustomId?: string;
    onBeforeHandleInteraction?: (interaction: ButtonInteraction) => Awaitable<boolean>;
}
export declare class GiveawayManager<A extends BaseDatabaseAdapter = BaseDatabaseAdapter> extends TypedEmitter<GiveawayManagerEvents> {
    readonly client: Client;
    readonly databaseAdapter: A;
    readonly giveawayTimouts: Collection<string, {
        giveawayId: string;
        timeout: NodeJS.Timeout;
    }>;
    readonly joinButtonCustomId: string;
    readonly onBeforeHandleInteraction: Exclude<GiveawayManagerOptions<A>['onBeforeHandleInteraction'], undefined>;
    private _ready;
    constructor(options: GiveawayManagerOptions<A>);
    /**
     * Toggles user's giveaway entry
     * @param giveawayId The giveaway id
     * @param userId The user id
     * @param updateMessage Updates the giveaway message
     * @returns Returns a giveaway entry data if entry is added, null if removed
     */
    toggleGiveawayEntry(giveawayId: string, userId: string, updateMessage?: boolean): Promise<IGiveawayEntry | null>;
    /**
     * Creates a giveaway
     * @param options Giveaway options
     * @returns The giveaway message
     */
    createGiveaway(options: CreateGiveawayOptions): Promise<Message>;
    /**
     * Ends a giveaway
     * @param giveawayId The giveaway id
     * @param fetchWinnerEntries Fetch winner entries
     * @returns Returns the giveaway winners if fetchWinnerEntries is enabled
     */
    endGiveaway(giveawayId: string, fetchWinnerEntries?: boolean): Promise<IGiveawayEntry[]>;
    /**
     * Deletes giveaway
     * @param giveawayId The giveaway id
     * @returns Returns the deleted giveaway if there's any
     */
    deleteGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    /**
     * Creates a giveaway message options
     * @param giveaway Giveaway data
     * @returns The giveaway message options
     */
    createGiveawayMessageOptions(giveaway: CreateGiveawayMessageOptions): Promise<BaseMessageOptions>;
    /**
     * Get random entries from a giveaway
     * @param giveawayId The giveaway id
     * @param winnerCount Count of selected entries
     * @returns Returns the selected winners and entries
     */
    getRandomGiveawayEntries(giveawayId: string, winnerCount?: number): Promise<{
        entries: IGiveawayEntry[];
        selected: IGiveawayEntry[];
    }>;
    /**
     * Get message of a giveaway
     * @param giveaway The giveaway data
     * @returns The giveaway message if there's any
     */
    getGiveawayMessage(giveaway: Pick<IGiveaway, 'guildId' | 'channelId' | 'messageId'>): Promise<Message | undefined>;
    /**
     * Clean deleted giveaways from database
     * @param giveaways Giveaways to clean
     * @returns Returns the deleted giveaways
     */
    clean(giveaways?: IGiveaway[]): Promise<IGiveaway[]>;
    /**
     * Starts the giveaway manager
     */
    start(): Promise<void>;
    /**
     * Destroy the giveaway manager
     */
    destroy(): void;
    protected createDataId(): string;
    protected createGiveawayTimeout(giveawayId: string, endsAt: Date): Promise<void>;
    protected deleteGiveawayTimeout(giveawayId: string): void;
    private _guildDelete;
    private _channelDelete;
    private _messageDelete;
    private _messageDeleteBulk;
    private _interactionCreate;
    private _err;
}
