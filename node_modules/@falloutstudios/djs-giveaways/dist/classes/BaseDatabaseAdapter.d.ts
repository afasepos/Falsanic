import { TypedEmitter } from 'fallout-utility';
import { IGiveaway, IGiveawayEntry } from '../types/giveaway';
import { GiveawayManager } from './GiveawayManager';
export interface BaseDatabaseAdapterEvents {
    giveawayCreate: [giveaway: IGiveaway];
    giveawayUpdate: [oldGiveaway: IGiveaway, newGiveaway: IGiveaway];
    giveawayDelete: [giveaway: IGiveaway];
    giveawayEntryCreate: [entry: IGiveawayEntry];
    giveawayEntryUpdate: [oldEntry: IGiveawayEntry, newEntry: IGiveawayEntry];
    giveawayEntryDelete: [entry: IGiveawayEntry];
    error: [error: Error];
}
export declare abstract class BaseDatabaseAdapter<Events extends BaseDatabaseAdapterEvents = BaseDatabaseAdapterEvents> extends TypedEmitter<Events> {
    manager: GiveawayManager<this>;
    start(manager: GiveawayManager<this>): Promise<void>;
    abstract fetchGiveaways(options?: {
        filter?: Partial<IGiveaway>;
        count?: number;
    }): Promise<IGiveaway[]>;
    abstract fetchGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    abstract createGiveaway(data: IGiveaway): Promise<IGiveaway>;
    abstract updateGiveaway(giveawayId: string, data: Partial<IGiveaway>): Promise<IGiveaway>;
    abstract deleteGiveaway(giveawayId: string): Promise<IGiveaway | undefined>;
    abstract deleteGiveaway(filter: Partial<IGiveaway>, count?: number): Promise<IGiveaway[]>;
    abstract fetchGiveawayEntries(options: {
        filter?: Partial<IGiveawayEntry>;
        count?: number;
    }): Promise<IGiveawayEntry[]>;
    abstract fetchGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    abstract createGiveawayEntry(giveawayId: string, data: IGiveawayEntry): Promise<IGiveawayEntry>;
    abstract updateGiveawayEntry(entryId: string, data: Partial<IGiveawayEntry>): Promise<IGiveawayEntry>;
    abstract deleteGiveawayEntry(entryId: string): Promise<IGiveawayEntry | undefined>;
    abstract deleteGiveawayEntry(filter: Partial<IGiveawayEntry>, count?: number): Promise<IGiveawayEntry[]>;
}
